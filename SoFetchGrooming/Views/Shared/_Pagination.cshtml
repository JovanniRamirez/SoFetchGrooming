@using X.PagedList.Mvc
@using X.PagedList

@model IPagedList

<nav aria-label="Page navigation">
    <ul class="pagination justify-content-center">
        <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
            <a class="page-link" href="@Url.Action(ViewContext.RouteData.Values["action"].ToString(), new { page = 1 })">First</a>
        </li>
        <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
            <a class="page-link" href="@Url.Action(ViewContext.RouteData.Values["action"].ToString(), new { page = Model.PageNumber - 1 })">Previous</a>
        </li>

        @* Ensure that we always display 5 page links, adjusting the range accordingly *@
        @{
            int startPage = Math.Max(1, Model.PageNumber - 2);
            int endPage = Math.Min(Model.PageCount, Model.PageNumber + 2);
            if (endPage - startPage + 1 < 5)
            {
                if (startPage == 1)
                {
                    endPage = Math.Min(Model.PageCount, startPage + 4);
                }
                else if (endPage == Model.PageCount)
                {
                    startPage = Math.Max(1, endPage - 4);
                }
            }
        }

        @for (int i = startPage; i <= endPage; i++)
        {
            <li class="page-item @(Model.PageNumber == i ? "active" : "")">
                <a class="page-link" href="@Url.Action(ViewContext.RouteData.Values["action"].ToString(), new { page = i })">@i</a>
            </li>
        }
        <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
            <a class="page-link" href="@Url.Action(ViewContext.RouteData.Values["action"].ToString(), new { page = Model.PageNumber + 1 })">Next</a>
        </li>
        <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
            <a class="page-link" href="@Url.Action(ViewContext.RouteData.Values["action"].ToString(), new { page = Model.PageCount })">Last</a>
        </li>
    </ul>
</nav>
